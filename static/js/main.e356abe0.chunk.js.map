{"version":3,"sources":["commons/icons/Menu.tsx","components/AppHeader.tsx","components/home/Home.tsx","components/services/Services.tsx","components/projects/Projects.tsx","components/contact/Contact.tsx","components/AppContent.tsx","components/App.tsx","serviceWorker.js","index.tsx"],"names":["Menu","className","React","Component","AppHeaderLink","props","to","text","useLocation","pathname","key","AppHeaderMenuLink","AppHeader","state","showMenu","toggleMenuOff","bind","onMenuPressed","document","body","removeEventListener","this","setState","addEventListener","links","map","renderLink","link","renderMenuLink","renderLinks","onClick","renderMenuLinks","Home","Services","Projects","Contact","AppContent","path","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e356abe0.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Menu.css'\r\n\r\ninterface MenuProps {}\r\ninterface MenuState {}\r\n\r\nclass Menu extends React.Component<MenuProps, MenuState> {\r\n  render () {\r\n    return (\r\n      <div className='Menu'>\r\n        <div className='Menu-bar' />\r\n        <div className='Menu-bar' />\r\n        <div className='Menu-bar' />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport {\r\n  Link,\r\n  useLocation\r\n} from 'react-router-dom'\r\n\r\nimport Menu from '../commons/icons/Menu'\r\n\r\n\r\nimport './_app.css'\r\n\r\ninterface AppHeaderLink {\r\n  to: string,\r\n  text: string\r\n}\r\n\r\ninterface AppHeaderProps {\r\n  links: AppHeaderLink[]\r\n}\r\n\r\ninterface AppHeaderState {\r\n  showMenu: boolean;\r\n}\r\n\r\nclass AppHeader extends React.Component<AppHeaderProps, AppHeaderState> {\r\n  constructor (props: AppHeaderProps) {\r\n    super(props)\r\n    this.state = {\r\n      showMenu: false\r\n    }\r\n    this.toggleMenuOff = this.toggleMenuOff.bind(this)\r\n    this.onMenuPressed = this.onMenuPressed.bind(this)\r\n  }\r\n\r\n  toggleMenuOff () {\r\n    document.body.removeEventListener('click', this.toggleMenuOff)\r\n    this.setState({\r\n      showMenu: false\r\n    })\r\n  }\r\n\r\n  onMenuPressed () {\r\n    document.body.removeEventListener('click', this.toggleMenuOff)\r\n    if (!this.state.showMenu) {\r\n      document.body.addEventListener('click', this.toggleMenuOff)\r\n      this.setState({\r\n        showMenu: true\r\n      })\r\n    }\r\n  }\r\n\r\n  renderLinks () {\r\n    return this.props.links.map(this.renderLink)\r\n  }\r\n\r\n  renderLink (link: AppHeaderLink) {\r\n    return (\r\n      <AppHeaderLink\r\n        key={link.to}\r\n        {...link} />\r\n    )\r\n  }\r\n\r\n  renderMenuLinks () {\r\n    return this.props.links.map(this.renderMenuLink)\r\n  }\r\n\r\n  renderMenuLink (link: AppHeaderLink) {\r\n    return (\r\n      <AppHeaderMenuLink\r\n        key={link.to}\r\n        {...link} />\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header\r\n        className='AppHeader'>\r\n        <div\r\n          className='AppHeader-item'>\r\n          <Link\r\n            className='AppHeader-link'\r\n            to='/'>\r\n            Sustainable Systems\r\n          </Link>\r\n        </div>\r\n        <div\r\n          className='AppHeader-links'>\r\n          { this.renderLinks() }\r\n        </div>\r\n        <div className='AppHeader-menu-btn-container'>\r\n          <button\r\n            className='AppHeader-menu-btn'\r\n            onClick={this.onMenuPressed}>\r\n            <Menu />\r\n          </button>\r\n          <div className={this.state.showMenu ? 'AppHeader-menu-btn-mask' : ''} />\r\n        </div>\r\n        <div\r\n          className={this.state.showMenu ? 'AppHeader-menu AppHeader-menu-show' : 'AppHeader-menu'}>\r\n          <ul\r\n            className='AppHeader-menu-list'>\r\n            { this.renderMenuLinks() }\r\n          </ul>\r\n        </div>\r\n      </header>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nfunction AppHeaderLink(props: AppHeaderLink) {\r\n  const {\r\n    to,\r\n    text\r\n  } = props\r\n  let className = 'AppHeader-link'\r\n  const location = useLocation()\r\n  if (location.pathname === to) {\r\n    className += ' AppHeader-link-active'\r\n  }\r\n  return (\r\n    <div\r\n      key={to}\r\n      className='AppHeader-item'>\r\n      <Link\r\n        className={className}\r\n        to={to}>\r\n        {text}\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction AppHeaderMenuLink(props: AppHeaderLink) {\r\n  const {\r\n    to,\r\n    text\r\n  } = props\r\n  let className = 'AppHeader-menu-link'\r\n  const location = useLocation()\r\n  if (location.pathname === to) {\r\n    className += ' AppHeader-menu-link-active'\r\n  }\r\n  return (\r\n    <li\r\n      key={to}\r\n      className='AppHeader-menu-item'>\r\n      <Link\r\n        className={className}\r\n        to={to}>\r\n        {text}\r\n      </Link>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default AppHeader\r\n","import React from 'react'\r\n\r\nimport './Home.css'\r\n\r\ninterface HomeProps {}\r\ninterface HomeState {}\r\n\r\nclass Home extends React.Component<HomeProps, HomeState> {\r\n  render () {\r\n    return (\r\n      <div className='Home'>\r\n        <div className='AppContent-background' />\r\n        <h1>Sustainable <br /> Systems</h1>\r\n        <h2>Let's walk together towards a sustainable future</h2>\r\n        <h3>Site under construction - release planned 01/2020</h3>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nimport './Services.css'\r\n\r\ninterface ServicesProps {}\r\ninterface ServicesState {}\r\n\r\nclass Services extends React.Component<ServicesProps, ServicesState> {\r\n  render () {\r\n    return (\r\n      <div className='Services'>\r\n        <h1>Services</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Services\r\n","import React from 'react'\r\n\r\nimport './Projects.css'\r\n\r\ninterface ProjectsProps {}\r\ninterface ProjectsState {}\r\n\r\nclass Projects extends React.Component<ProjectsProps, ProjectsState> {\r\n  render () {\r\n    return (\r\n      <div className='Projects'>\r\n        <h1>Projects</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Projects\r\n","import React from 'react'\r\n\r\nimport './Contact.css'\r\n\r\ninterface ContactProps {}\r\ninterface ContactState {}\r\n\r\nclass Contact extends React.Component<ContactProps, ContactState> {\r\n  render () {\r\n    return (\r\n      <div className='Contact'>\r\n        <h1>Contact</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\r\nimport {\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom'\r\n\r\nimport Home from './home/Home'\r\nimport Services from './services/Services'\r\nimport Projects from './projects/Projects'\r\nimport Contact from './contact/Contact'\r\n\r\nimport './_app.css'\r\n\r\ninterface AppContentProps {}\r\ninterface AppContentState {}\r\n\r\nclass AppContent extends React.Component<AppContentProps, AppContentState> {\r\n  render () {\r\n    return (\r\n      <div className='AppContent'>\r\n        <Switch>\r\n          <Route path='/services'>\r\n            <Services />\r\n          </Route>\r\n          <Route path='/projects'>\r\n            <Projects />\r\n          </Route>\r\n          <Route path='/contact'>\r\n            <Contact />\r\n          </Route>\r\n          <Route path='/'>\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppContent\r\n","import React from 'react'\nimport {\n  BrowserRouter as Router\n} from 'react-router-dom'\n\nimport AppHeader from './AppHeader'\nimport AppContent from './AppContent'\n\nimport './_app.css'\n\ninterface AppProps {}\ninterface AppState {}\n\nconst links = [\n  { to: '/', text: 'Home' },\n  { to: '/services', text: 'Services' },\n  { to: '/projects', text: 'Projects' },\n  { to: '/contact', text: 'Contact' }\n]\n\nclass App extends React.Component<AppProps, AppState> {\n\n  render () {\n    return (\n      <Router>\n        <div className='App'>\n          <AppHeader links={links} />\n          <AppContent />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","/* globals fetch */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}